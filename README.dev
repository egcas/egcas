# egcas-meta
meta project (top-level project) for egcas 


Dependencies to install for development:
========================================
- Kubuntu 16.04 LTS or 18.04
- install Qt Creator 2.0.2 (Qt 5.5) from www.qt.io  OR install the following packages: sudo apt-get install qtcreator qt5-default qtmultimedia5-dev qttools5-dev
- sudo apt-get install build-essential cmake maxima python3-pip ssh git libglu1-mesa-dev freeglut3-dev mesa-common-dev libboost-dev sbcl texinfo imagemagick inkscape default-jdk uuid-dev cmake-curses-gui openjdk-8-jdk-headless
- sudo pip3 install cogapp
- build with Qt Creator or with following commands
on command line (cmake prefix path must be set to Qt libs installation to work):
  cd <BUILD_DIR>
  - Qt5_DIR=/opt/Qt/5.5/gcc_64/ cmake .. 
    OR (depending on which Qt Creator you insalled - packages or Qt Creator direct from Digia)  
    Qt5_DIR=/usr/lib/x86_64-linux-gnu/qt5/ cmake ..
  - make
  or
  - cmake --build . --config Debug 
  
to use ninja as build tool:
===========================
Qt5_DIR=/opt/Qt/5.11.2/gcc_64/ cmake -GNinja ..
  
create e.g. a debian package:
========================================
- configure cmake with above commands
- cmake --build . --target package --config Release 

use different maxima kernel
===========================
To use a maxima kernel from a different installation path (not from package provided) the following environment variable must be set (including maxima binary):
MAXIMA_BINARY_PATH=/usr/bin/maxima

Search for bugs with clang static analysis:
================================================
ATTENTION: This does NOT work on (K)Ubuntu 14.04LTS!!! However it works with Kubuntu 15.10 ...
- clang must be installed
start static analysis with following command in main directory:
./static_analysis.sh
  
Building with MXE (crosscompiling for windows) on Ubuntu 16.04 64bit:
================================================
- To setup the neccessary mxe environment for windows crosscompiling, execute setup_mxe.sh in the win subdirectory.
- As next step the cmake build environment has to be set up. For this to setup execute cmake_win.sh also in the win subdirectory.
- Then execute 'source set_env.sh' in the open shell.

Now the required targets can be built in the generated build directory "build_win" as usual:
e.g. "make egCAS"

Building under windows
=============================================
Install chocolatey package management. Install in chocolatey the following packages (via "choco install" on command line):
 - cmake
 - git
 - jdk8
 - nsis
 - python3
 
Install Qt Creator (choose mingw as compiler during installation).

Add the following pathes to the %PATH% variable (examples adjust paths):
  C:\Program Files\Java\jdk1.8.0_191\bin
  C:\Program Files\CMake\bin
  C:\Program Files (x86)\NSIS\Bin
  C:\Qt\Tools\mingw530_32\bin
  C:\Qt\5.11.2\mingw53_32\bin
  C:\python3\
  C:\python3\Scripts\

execute pip3 install cogapp on command line.
To build the installer for windows execute:
        cmake .. -G "MinGW Makefiles"
        cmake --build . --target package --config Release
        or:
        mingw32-make.exe package


switch to clang on linux (for compilation):
================================================
sudo update-alternatives --config c++


Release a new software
================================================
- verify that all tests work correctly: make egcas-tests-all
- Change Version in top level CMakeLists.txt
- Change CMAKE_BUILD_TYPE to 'Release' in top level CMakeLists.txt
- start Release branches for all submodules (release/x.y.z)
- finish Release branches for all submodules when ready
- finish Release branch in meta project
- draft a new release on github
- upload binaries (attention - seems not to work on firefox)

